import * as $ from "jquery";
import * as async from "async";
import axios from "axios";
import {FormList} from "@enhavo/form/form/model/FormList";

export class MediaForm extends FormList
{
    upload: boolean;
    uploadLabel: string;
    loading: boolean = false;
    buttons: MediaFormButton[];
    maxUploadSize: number;
    multiple: boolean;
    sortable: boolean;
    editable: boolean;
    progress: number;
    dragOver: boolean;
    highlight: boolean;

    startUpload()
    {
        $(this.element).trigger('click');
    }

    change()
    {
        let formElement = <HTMLFormElement>document.createElement("form");
        let inputElement = <HTMLElement>this.element.cloneNode();

        $(formElement).hide();
        $(formElement).append(inputElement);
        $(formElement).appendTo(document.body);
        $(formElement).on('submit', (event) => {
            event.preventDefault();
            this.uploadForm(formElement).then(() => {
                $(formElement).remove();
            });
        });
        $(formElement).trigger('submit');
    }

    drop(data: DataTransfer)
    {
        this.uploadFiles(data.files).then(() => {
            this.loading = false;
        }).catch(() => {
            this.loading = false;
        });
    }

    private uploadForm(formElement: HTMLFormElement = null)
    {
        return new Promise((resolve, reject) => {
            let data = new FormData(formElement);
            this.createCallback(data)((data: any, err: any) => {
                if (err) {
                    reject(err);
                    return;
                }
                resolve();
            });
        });
    }

    private uploadFiles(files: any): Promise<void>
    {
        return new Promise((resolve, reject) => {
            let callbacks: ((callback: any) => void)[] = [];

            if (!this.multiple) {
                files = [files[0]];
            }

            for (let file of files) {
                let data = new FormData();
                data.append('files', file);
                callbacks.push(this.createCallback(data));
            }

            async.parallel(callbacks, (err) => {
                if (err) {
                    reject(err);
                    return;
                }
                resolve();
            });
        });
    }

    private createCallback(data: any): (callback: any) => void
    {
        let url = '/file/add';

        return (callback) => {
            axios.post(url, data, {
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            })
                .then((response) => {
                    for (let file of response.data) {
                        this.addFile(file);
                    }
                    callback();
                })
                .catch((error) => {
                    console.error(error)
                    callback(null, error)
                });
        }
    }

    private addFile(file: MediaFile)
    {
        let item = this.addItem();
        for (const property in file) {
            if (file.hasOwnProperty(property)) {
                if (item.get(property)) {
                    item.get(property).value = file[property];
                }
            }
        }
    }
}

export class MediaFormButton
{
    label: string;
    type: string;
}

export class MediaFile
{
    extension: string;
    filename: string;
    id: number;
    md5Checksum: string;
    mimeType: string;
    token: string;
}
