import axios, {CancelTokenSource}  from "axios";
import * as _ from "lodash";
import Data, {Item, Tab, Tag} from "@enhavo/media-library/Data";
import UpdatedEvent from "@enhavo/app/view-stack/event/UpdatedEvent";
import * as async from "async";
import Message from "@enhavo/app/flash-message/Message";
import FlashMessenger from "@enhavo/app/flash-message/FlashMessenger";
import EventDispatcher from "@enhavo/app/view-stack/EventDispatcher";
import View from "@enhavo/app/view/View";
import ActionManager from "@enhavo/app/action/ActionManager";
import Router from "@enhavo/core/Router";
import ComponentRegistryInterface from "@enhavo/core/ComponentRegistryInterface";

export default class MediaLibraryApp
{
    private data: Data;
    private source: CancelTokenSource;
    private readonly eventDispatcher: EventDispatcher;
    private readonly flashMessenger: FlashMessenger;
    private readonly view: View;
    private readonly actionManager: ActionManager;
    private readonly router: Router;
    private readonly componentRegistry: ComponentRegistryInterface;

    public constructor(data: any, eventDispatcher: EventDispatcher, view: View, actionManager: ActionManager, flashMessenger: FlashMessenger, router: Router, componentRegistry: ComponentRegistryInterface)
    {
        this.data = _.extend(data.data, new Data());
        this.flashMessenger = flashMessenger;
        this.eventDispatcher = eventDispatcher;
        this.view = view;
        this.actionManager = actionManager;
        this.router = router;
        this.componentRegistry = componentRegistry;

        $(document).on('add', () => {
            this.add();
        });
    }

    public init()
    {
        this.view.init();
        this.actionManager.init();
        this.flashMessenger.init();

        this.componentRegistry.registerStore('MediaLibrary', this);
        this.componentRegistry.registerData(this.data);

        this.view.addDefaultCloseListener();

        this.getTags();
        this.getList();
        this.view.ready();
    }

    private add()
    {
        this.view.loading();
        let calls: ((callback: (err: any) => void) => void)[] = [];
        for(let image of this.data.selectedItems) {
            calls.push((callback) => {
                axios
                    .get('/admin/media-library/add/'+image.id+'?tab='+image.tab)
                    .then(response => {
                        this.eventDispatcher.dispatch(new UpdatedEvent(this.view.getId(), response.data));
                        callback(null);
                    })
                    .catch(error => {
                        callback('error');
                    })
            });
        }

        async.parallel(calls,(err) => {
            if(err) {
                this.flashMessenger.addMessage(new Message(Message.ERROR, "Ein Fehler ist aufgetreten"));
            } else {
                this.flashMessenger.addMessage(new Message(Message.SUCCESS, "Dateien wurden hinzugefÃ¼gt"));
            }
            this.view.loaded();
            this.data.selectedItems = [];
        });
    }

    public toggleItem(item: Item): void
    {
        if(!this.isItemSelected(item)) {
            if(this.data.multiple) {
                this.addItem(item);
            } else {
                this.data.selectedItems = [];
                this.addItem(item);
            }
        } else {
            this.removeItem(item);
        }

        this.checkItemSelection();
    }

    private checkItemSelection()
    {
        for(let item of this.data.items) {
            item.selected = this.isItemSelected(item);
        }
    }

    public isItemSelected(item: Item): boolean
    {
        for(let selectedItem of this.data.selectedItems) {
            if(selectedItem.id == item.id) {
                return true;
            }
        }
        return false;
    }

    private removeItem(item: Item)
    {
        let index: number = -1;
        for(let i in this.data.selectedItems) {
            if(this.data.selectedItems[i].id == item.id) {
                index = parseInt(i);
                break;
            }
        }

        if (index !== -1) {
            this.data.selectedItems.splice(index, 1);
        }
    }

    private addItem(item: any)
    {
        this.data.selectedItems.push(item);
    }

    public setActiveTag(id:any)
    {
        this.data.activeTag = id;
        this.getList();
    }

    public update()
    {
        this.getList();
    }

    private getList()
    {
        this.data.loading = true;
        let url = this.router.generate('enhavo_media_library_list');

        if(this.source != null) {
            this.source.cancel();
        }
        this.source = axios.CancelToken.source();
        axios
            .get(url, {
                params: {
                    tab: this.data.activeTab,
                    tag: this.data.activeTag,
                    search: this.data.searchString,
                },
                cancelToken: this.source.token
            })
            .then(response => {
                this.source = null;

                let items = [];
                let itemsData = response.data.items;
                for(let itemData of itemsData) {
                    let item = new Item();
                    item.id = itemData.id;
                    item.previewImageUrl = itemData.previewImageUrl;
                    item.tab = this.data.activeTab;
                    item.name = itemData.name;
                    item.selected = false;
                    items.push(item);
                }
                this.data.items = items;
                this.checkItemSelection();
                this.data.loading = false;
            });
    }


    private getTags()
    {
        this.data.loading = true;
        let url = this.router.generate('enhavo_media_library_tags');

        axios
            .get(url, {
                params: {
                    tab: this.data.activeTab,
                    tag: this.data.activeTag,
                    search: this.data.searchString,
                },
            })
            .then(response => {
                let tags = [];
                let tagsData = response.data.tags;
                for(let tagData of tagsData) {
                    let item = new Tag();
                    item.title = tagData.title;
                    tags.push(item);
                }
                this.data.tags = tags;
                this.checkItemSelection();
                this.data.loading = false;
            });
    }

    public changeTab(tab: Tab)
    {
        this.data.activeTab = tab.id;
        this.getList();
        this.data.activeTab = tab.id;
    }

    public search()
    {
        this.getList();
    }

    public clearSearch()
    {
        this.data.searchString = '';
        this.getList();
    }
}
